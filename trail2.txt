from flask import Flask  , request , render_template , redirect , url_for, flash , session
import requests
from werkzeug.security import generate_password_hash
from werkzeug.security import check_password_hash
from authlib.integrations.flask_client import OAuth
from models import User 

from database import db
from api_key import CLIENT_SECRET ,CLIENT_ID




app = Flask(__name__ , template_folder='templates' )
oauth = OAuth(app)

google = oauth.register(
    name  = 'google' , 
    client_id = CLIENT_ID, 
    client_secret =CLIENT_SECRET , 
    authorize_url='https://accounts.google.com/o/oauth2/auth' , 

    server_metadata = 'https://accounts.google.com/.well-known/openid-configuration',
    client_kwargs= {'scope':'openid profile email'}
)


app.config['SECRET_KEY'] = 'supersecretkey123!'
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:vaibhavgala262@localhost:3307/flask_db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db.init_app(app)

with app.app_context():
    db.create_all()   # create all tables




@app.route('/')
def home():
    user = User.query.all()

    return render_template('base.html')


@app.route('/register' , methods = ['POST', 'GET'])
def register():
    if request.method=='POST': 

        # we are still not checking if username exists
        username = request.form.get('username')
        password = request.form.get('password')
        hashed_password = generate_password_hash(password  )
        # then add values to database 
        user = User(name =username ,password=hashed_password)
        db.session.add(user)
        db.session.commit()
        return redirect('login' )

    elif request.method =='GET':
        return render_template('register.html')


@app.route('/login' ,  methods = ['POST', 'GET'])
def login():
    if request.method=='GET':
        return render_template('login.html')
    elif request.method== 'POST':
        username = request.form.get('username') 
        password = request.form.get('password')

        user=User.query.filter_by(name=username).first()
        
        if user and check_password_hash(user.password , password):
            flash('Login successful!', 'success')
            return redirect('/')
        else :
            flash('Enter correct credentials')
            return render_template('login.html')  # maybe we can write more if statement to give context to user exactly what is wrong



@app.route('/login/google')

def login_google():

    try:
      redirect_uri = url_for('authorize_google' , _external=True)
      return google.authorize_redirect(redirect_uri)

    except Exception as e:
      app.logger.error(f"Errorr during login : {str(e)}")
      return f"Error occured {str(e)}" , 500
    
@app.route('/authorize/google')
def authorize_google():

    try :
        token = google.authorize_access_token()
        userinfo_endpoint= google.server_metadata_url['userinfo_endpoint']
    
        resp = google.get('userinfo')
    
        user_info = resp.json()
        username = user_info['email']


        user = User.query.filter_by(name = username ).first()
        if not user:
            user = User(name= username )
            db.session.add(user)
            db.session.commit()

            session['username']= username
            session['oauth_token']=token
        return redirect(url_for('home'))
    except Exception as e :
        return str(e)

        

     



if __name__ == '__main__' :
    app.run(host="0.0.0.0" , debug =True)